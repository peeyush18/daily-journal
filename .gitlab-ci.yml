stages:
  - install
  - build
  - release
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Install dependencies
install_dependencies:
  stage: install
  image: node:22
  script:
    - npm ci --prefer-offline
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

# Build the project
build_project:
  stage: build
  image: node:22
  script:
    - npm run build
  artifacts:
    paths:
      - build/  # Your built output (adjust if different)
    expire_in: 1 week  # Keep artifact for releases

# Create a release (GitLab Releases)
create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: ["build_project"]
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
    - cp build/main.js build/manifest.json build/styles.css .  # Copy files to root for release
  rules:
    - if: $CI_COMMIT_TAG  # Only run on tagged commits
  release:
    name: "Release $CI_COMMIT_TAG"
    description: "Release automatically generated by GitLab CI"
    tag_name: $CI_COMMIT_TAG
    assets:
      links:
      links:
        - name: "main.js"
          url: "${CI_JOB_URL}/artifacts/file/main.js"
        - name: "manifest.json"
          url: "${CI_JOB_URL}/artifacts/file/manifest.json"
        - name: "styles.css"
          url: "${CI_JOB_URL}/artifacts/file/styles.css"

# 3. Deploy to GitLab Pages (MANUAL TRIGGER)
deploy_to_pages:
  stage: deploy
  image: alpine:latest
  needs: ["build_project"]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Only allow on main branch
      when: manual  # Requires manual click in GitLab UI
  script:
    - echo "Deploying to GitLab Pages..."
    - cp -r build/ public/  # GitLab Pages requires files in `public/`
  artifacts:
    paths:
      - public/
  environment:
    name: pages
    url: https://$CI_PROJECT_NAMESPACE.gitlab.io/$CI_PROJECT_NAME